" vim: foldmethod=marker foldcolumn=3 foldlevel=0 fenc=utf-8

set encoding=utf-8
set fileencoding=utf-8
set fileformats=unix,dos,mac
scriptencoding utf-8

unlet! skip_defaults_vim
source $VIMRUNTIME/defaults.vim

if has('vim_starting')
    set fileencodings+=cp932
    let $PATH = expand("~/.pyenv/shims") . ":" . $PATH
    let $PATH = expand("~/.plenv/shims") . ":" . $PATH
endif

set autowrite
set updatetime=100

set hidden

set modeline
set modelines=2

set spell
set spelllang=en,cjk

set history=1000
set tabstop=4
set expandtab
set smarttab
set textwidth=0
set virtualedit=block
set shiftwidth=4
set number
set autoindent
set smartindent
source $VIMRUNTIME/macros/matchit.vim
set display=lastline
set pumheight=10
set showmatch
set matchtime=1
if version >= 800
    set breakindent
endif

set whichwrap=[,],<,>,b,s
set backspace=indent,eol,start
set clipboard+=autoselect,unnamed

set hlsearch
set ignorecase
set smartcase
set wrapscan

set ambiwidth=double

set belloff=all

set list
set listchars=tab:>-,trail:-

set wildmenu
set wildmode=list,longest,full "command-line-modeのリスト表示

set background=dark
try
    colorscheme molokai
catch
    colorscheme desert
endtry


"" ForceOverwrite - force write if readonly
command! ForceOverwrite w !sudo tee >/dev/null %
"" DiffOrig - how did I edit this file? {{{2
command! DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis | wincmd p | diffthis
"" JsonFormat - format json {{{2
command! JsonFormat :execute '%!python -m json.tool'
            \ | :execute '%!python -c "import re,sys;chr=__builtins__.__dict__.get(\"unichr\",chr);sys.stdout.write(re.sub(r''\\u[0-9a-f]{4}'', lambda x: chr(int(\"0x\" + x.group(0)[2:], 16)).encode(\"utf-8\"), sys.stdin.read()))"'
            \ | :set filetype=json | :1
"" VO - insert output of vim command in current buffer {{{2
command! -narg=+ VO :call ViewOutput(<q-args>)
function! ViewOutput(cmd)
    let save_reg=@a
    redir @a
    silent exec a:cmd
    redir END
    put a
    let @a=save_reg
endfunction

"" UnMinify Simple re-format for minified Javascript {{{2
command! UnMinify call UnMinify()
function! UnMinify()
    %s/{\ze[^\r\n]/{\r/g
    %s/){/) {/g
    %s/};\?\ze[^\r\n]/\0\r/g
    %s/;\ze[^\r\n]/;\r/g
    %s/[^\s]\zs[=&|]\+\ze[^\s]/ \0 /g
    normal ggVG=
endfunction

" Mapping {{{1
let mapleader = "\<Space>"

" <C-u>は、範囲指定(数字入力)を削除
nnoremap <Leader>w :<C-u>w<CR>
nnoremap <Leader>W :<C-u>wq<CR>
nnoremap <Leader>q :<C-u>q<CR>
nnoremap <Leader><Leader>q :<C-u>qa<CR>
nnoremap <Leader>Q :<C-u>q!<CR>

nnoremap ; :
vnoremap ; :

noremap j gj
noremap k gk
noremap gj j
noremap gk k

" Tab mapping
nnoremap <S-Tab> <<
inoremap <S-Tab> <C-d>

inoremap <silent>jj <ESC>
inoremap <silent>jk <ESC>

nnoremap <Leader>o :<C-u>for i in range(v:count1) \| call append(line('.'), '') \| endfor<CR>
nnoremap <Leader>O :<C-u>for i in range(v:count1) \| call append(line('.')-1, '') \| endfor<CR>

map y <Plug>(operator-flashy)
"nnoremap Y y$
nmap Y <Plug>(operator-flashy)$

noremap n nzzzv
noremap N Nzzzv
nnoremap / /\v
nnoremap ? ?\v
cnoremap s// s//
cnoremap g// g//
cnoremap v// v//
nnoremap gs :<C-u>%s/\v//g<Left><Left><Left><C-f>i
vnoremap gs :s/\v//g<Left><Left><Left>

nnoremap <Leader>vp :vim  ** \| cw<Left><Left><Left><Left><Left><Left><Left><Left>

" tagsジャンプの時に複数ある時は一覧表示
nnoremap <C-]> g<C-]>

nnoremap <Esc><Esc> :<C-u>nohlsearch<CR>
noremap <Leader>h ^
noremap <Leader>H 0
noremap <Leader>l $

" Window and Tab operation
nnoremap s <Nop>
nnoremap sj <C-w>j
nnoremap sk <C-w>k
nnoremap sl <C-w>l
nnoremap sh <C-w>h
nnoremap sJ <C-w>J
nnoremap sK <C-w>K
nnoremap sL <C-w>L
nnoremap sH <C-w>H
nnoremap sr <C-w>r
nnoremap s= <C-w>=
nnoremap sw <C-w>w
nnoremap so <C-w>_<C-w>|
nnoremap s> <C-w>>
nnoremap s< <C-w><
nnoremap s+ <C-w>+
nnoremap s- <C-w>-
nnoremap sO <C-w>=
nnoremap sN :<C-u>bn<CR>
nnoremap sP :<C-u>bp<CR>
nnoremap sn gt
nnoremap sp gT
for n in range(1, 9)
    execute 'nnoremap <silent> s'.n  ':<C-u>tabnext'.n.'<CR>'
endfor
nnoremap st :<C-u>tabnew<CR>
nnoremap sx :<C-u>tabclose<CR>
nnoremap ss :<C-u>sp<CR>
nnoremap sv :<C-u>vs<CR>
nnoremap sq :<C-u>q<CR>
nnoremap sQ :<C-u>bd<CR>

nnoremap <Leader>ev :vsplit $MYVIMRC<CR>
nnoremap <Leader>sv :source $MYVIMRC<CR>
nnoremap <Leader>egv :vsplit $MYGVIMRC<CR>
nnoremap <Leader>sgv :source $MYGVIMRC<CR>
nnoremap <Leader>a :cclose<CR>

noremap + <C-a>
noremap - <C-x>

" New in Vim8 http://itchyny.hatenablog.com/entry/2016/09/13/000000
" Highlight during search without moving cursor
cnoremap <C-n> <C-g>
cnoremap <C-p> <C-t>

" Text usabiity improvement
inoremap japp <ESC>:<C-u>set noimdisable<CR>a
set pastetoggle=<F12>

