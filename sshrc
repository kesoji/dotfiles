if [ $(hostname | grep kesoji) ] ; then
    echo "sshrc is ignored."
    exec zsh
else
# shell
set -o vi

# env
## colorize terminal
export CLICOLOR=1
export LSCOLORS=DxGxcxdxCxegedabagacad
## LESS options
## -R:  ANSI Color エスケープ
## -M:  行数/%/ファイル名表示
## -i:  vimでいうsmartcaseを有効化
## -W:  画面移動したときに、 どこから新しく表示されたかをハイライト
## -x4: タブの大きさを4にする
export LESS="-R -M -i -W -x4"
export LESSGLOBALTAGS=global
if which lesspipe.sh > /dev/null; then
    export LESSOPEN='| /usr/bin/env lesspipe.sh %s 2>&-'
fi

# alias
alias g='git'
alias gst='git status'
alias gd='git diff'
alias gci='git commit'
alias ls='ls -F --color' # -F:  ディレクトリに/, 実行ファイルに*などをつける
alias ll='ls -l'
alias la='ls -la'
alias c='clear'
alias sudo='sudo '       # sudoしたときにもaliasを機能させる設定
alias sudoe='sudo -E '   # sudoしたときに.sshrcの設定を反映させる設定。 sudoe vim とかで使う。

# vim
export VIMINIT="let \$MYVIMRC='$SSHHOME/.sshrc.d/vimrc_sshrc' | source \$MYVIMRC"

#
# Defines transfer alias and provides easy command line file and folder sharing.
#
# Authors:
#   Remco Verhoef <remco@dutchcoders.io>
#

curl --version 2>&1 > /dev/null
if [ $? -ne 0 ]; then
  echo "Could not find curl."
  return 1
fi

transfer() {
    # check arguments
    if [ $# -eq 0 ];
    then
        echo "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md"
        return 1
    fi

    # get temporarily filename, output is written to this file show progress can be showed
    tmpfile=$( mktemp -t transferXXX )

    # upload stdin or file
    file=$1

    if tty -s;
    then
        basefile=$(basename "$file" | sed -e 's/[^a-zA-Z0-9._-]/-/g')

        if [ ! -e $file ];
        then
            echo "File $file doesn't exists."
            return 1
        fi

        if [ -d $file ];
        then
            # zip directory and transfer
            zipfile=$( mktemp -t transferXXX.zip )
            cd $(dirname $file) && zip -r -q - $(basename $file) >> $zipfile
            curl --progress-bar --upload-file "$zipfile" "https://transfer.sh/$basefile.zip" >> $tmpfile
            rm -f $zipfile
        else
            # transfer file
            curl --progress-bar --upload-file "$file" "https://transfer.sh/$basefile" >> $tmpfile
        fi
    else
        # transfer pipe
        curl --progress-bar --upload-file "-" "https://transfer.sh/$file" >> $tmpfile
    fi

    # cat output link
    cat $tmpfile

    # cleanup
    rm -f $tmpfile
}

# Congratulations
echo "Yeah! sshrc is working!"

fi
